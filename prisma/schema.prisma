generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  THERAPIST
  ADMIN
  CLIENT
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum PaymentStatus {
  PAID
  FAILED
}

enum PaymentMethod {
  CARD
  PAYPAL
  TRANSFER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum QuestionType {
  MULTIPLE_CHOICE
  SCALE
  TEXT
  BOOLEAN
}

enum AnxietyLevel {
  MINIMAL
  MILD
  MODERATE
  SEVERE
}

model User {
  id                 String             @id @default(uuid())
  avatar             String?
  name               String
  email              String             @unique
  passwordHash       String
  role               Role
  isActive           Boolean            @default(true)
  subscriptionStatus SubscriptionStatus
  createdAt          DateTime           @default(now())

  subscriptions Subscription[]
  clients       Client[]
  formResponses FormResponse[]
  formInvitations FormInvitation[]
  passwordResetToken PasswordResetToken[]

  // Back-relations para blog
  blogPosts BlogPost[] @relation("UserBlogPosts")
  comments  Comment[]  @relation("UserComments")
}

model Membership {
  id            String   @id @default(uuid())
  name          String
  description   String
  stripePriceId String?
  priceMonthly  Float
  priceYearly   Float?
  features      String[]
  createdAt     DateTime @default(now())

  subscriptions Subscription[]
}

model FormInvitation {
  id             String        @id @default(uuid())
  token          String        @unique
  therapistId    String
  clientId       String
  formTemplateId String
  isCompleted    Boolean       @default(false)
  createdAt      DateTime      @default(now())
  expiresAt      DateTime?

  therapist      User          @relation(fields: [therapistId], references: [id])
  client         Client        @relation(fields: [clientId], references: [id])
  formTemplate   FormTemplate  @relation(fields: [formTemplateId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String
  membershipId      String
  status            SubscriptionStatus
  startDate         DateTime
  endDate           DateTime?
  nextBillingDate   DateTime?
  paymentMethod     PaymentMethod
  externalPaymentId String?

  user       User         @relation(fields: [userId], references: [id])
  membership Membership   @relation(fields: [membershipId], references: [id])
  payments   PaymentLog[]
}

model PaymentLog {
  id             String        @id @default(uuid())
  subscriptionId String
  amount         Float
  status         PaymentStatus
  method         PaymentMethod
  paidAt         DateTime

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model Client {
  id          String    @id @default(uuid())
  therapistId String
  name        String
  email       String?
  birthDate   DateTime?
  gender      Gender?
  notes       String?
  createdAt   DateTime  @default(now())

  therapist     User           @relation(fields: [therapistId], references: [id])
  formResponses FormResponse[]
  formInvitations FormInvitation[]
}

model FormTemplate {
  id             String        @id @default(uuid())
  title          String
  description    String
  isActive       Boolean       @default(true)
  createdBy      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt // <--- este es el cambio
  questions      Question[]
  formResponses  FormResponse[]
  formInvitations FormInvitation[]
}

model Question {
  id             String       @id @default(uuid())
  formTemplateId String
  text           String
  type           QuestionType
  options        Json
  order          Int

  formTemplate FormTemplate @relation(fields: [formTemplateId], references: [id])
  answers      Answer[]
}

model FormResponse {
  id             String        @id @default(uuid())
  formTemplateId String
  therapistId    String
  clientId       String
  filledAt       DateTime      @default(now())
  score          Int?
  level          AnxietyLevel?

  therapist    User         @relation(fields: [therapistId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])
  formTemplate FormTemplate @relation(fields: [formTemplateId], references: [id])
  answers      Answer[]
  report       Report?
}

model Answer {
  id             String @id @default(uuid())
  formResponseId String
  questionId     String
  answer         String

  formResponse FormResponse @relation(fields: [formResponseId], references: [id])
  question     Question     @relation(fields: [questionId], references: [id])
}

model Report {
  id             String       @id @default(uuid())
  formResponseId String       @unique
  summary        String
  score          Int
  level          AnxietyLevel
  generatedAt    DateTime     @default(now())

  formResponse FormResponse @relation(fields: [formResponseId], references: [id])
}

// ---------------------------------------------
// Blog: categorÃ­as, posts, portada y comentarios
// ---------------------------------------------

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  posts BlogPost[]
}

model BlogPost {
  id            String      @id @default(uuid())
  title         String
  slug          String      @unique
  excerpt       String?
  content       String
  coverImage    String?
  coverImageAlt String?
  isFeatured    Boolean     @default(false)
  status        PostStatus  @default(DRAFT)
  publishedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relaciones
  authorId  String
  author    User        @relation("UserBlogPosts", fields: [authorId], references: [id])

  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id])

  comments Comment[]
}

model Comment {
  id        String         @id @default(uuid())
  content   String
  status    CommentStatus  @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relaciones
  postId  String
  post    BlogPost @relation(fields: [postId], references: [id])

  authorId String?
  author   User?    @relation("UserComments", fields: [authorId], references: [id])

  // Soporte para hilos (respuestas)
  parentId String?
  parent   Comment?  @relation("CommentToReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentToReplies")
}
