generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  THERAPIST
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum PaymentStatus {
  PAID
  FAILED
}

enum PaymentMethod {
  CARD
  PAYPAL
  TRANSFER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum QuestionType {
  MULTIPLE_CHOICE
}

enum AnxietyLevel {
  MINIMAL
  MILD
  MODERATE
  SEVERE
}

model User {
  id                 String             @id @default(uuid())
  name               String
  email              String             @unique
  passwordHash       String
  role               Role
  isActive           Boolean            @default(true)
  subscriptionStatus SubscriptionStatus
  createdAt          DateTime           @default(now())

  subscriptions Subscription[]
  clients       Client[]
  formResponses FormResponse[]
}

model Membership {
  id           String   @id @default(uuid())
  name         String
  description  String
  priceMonthly Float
  priceYearly  Float?
  features     String[] // Puedes serializar como JSON si lo prefieres
  createdAt    DateTime @default(now())

  subscriptions Subscription[]
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String
  membershipId      String
  status            SubscriptionStatus
  startDate         DateTime
  endDate           DateTime?
  nextBillingDate   DateTime?
  paymentMethod     PaymentMethod
  externalPaymentId String?

  user       User         @relation(fields: [userId], references: [id])
  membership Membership   @relation(fields: [membershipId], references: [id])
  payments   PaymentLog[]
}

model PaymentLog {
  id             String        @id @default(uuid())
  subscriptionId String
  amount         Float
  status         PaymentStatus
  method         PaymentMethod
  paidAt         DateTime

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model Client {
  id          String    @id @default(uuid())
  therapistId String
  name        String
  email       String?
  birthDate   DateTime?
  gender      Gender?
  notes       String?
  createdAt   DateTime  @default(now())

  therapist     User           @relation(fields: [therapistId], references: [id])
  formResponses FormResponse[]
}

model FormTemplate {
  id          String  @id @default(uuid())
  title       String
  description String
  isActive    Boolean @default(true)
  createdBy   String

  questions     Question[]
  formResponses FormResponse[]
}

model Question {
  id             String       @id @default(uuid())
  formTemplateId String
  text           String
  type           QuestionType
  options        Json
  order          Int

  formTemplate FormTemplate @relation(fields: [formTemplateId], references: [id])
  answers      Answer[]
}

model FormResponse {
  id             String        @id @default(uuid())
  formTemplateId String
  therapistId    String
  clientId       String
  filledAt       DateTime      @default(now())
  score          Int?
  level          AnxietyLevel?

  therapist    User         @relation(fields: [therapistId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id])
  formTemplate FormTemplate @relation(fields: [formTemplateId], references: [id])
  answers      Answer[]
  report       Report?
}

model Answer {
  id             String @id @default(uuid())
  formResponseId String
  questionId     String
  answer         String

  formResponse FormResponse @relation(fields: [formResponseId], references: [id])
  question     Question     @relation(fields: [questionId], references: [id])
}

model Report {
  id             String       @id @default(uuid())
  formResponseId String       @unique
  summary        String
  score          Int
  level          AnxietyLevel
  generatedAt    DateTime     @default(now())

  formResponse FormResponse @relation(fields: [formResponseId], references: [id])
}
